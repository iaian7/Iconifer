/* 
 This file was generated by Dashcode.
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
	dashcode.setupParts();
	loadPrefs();
	versionCheck();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
	// Stop any timers to prevent CPU usage
	// Remove any preferences as needed
	// widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	erasePrefs();
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
	// Stop any timers to prevent CPU usage
	updatePrefs();
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
	// Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
	// Retrieve any preference values that you need to be synchronized here
	// Use this for an instance key's value:
	// instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	//
	// Or this for global key's value:
	// globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget) {
		widget.prepareForTransition("ToBack");
	}

	front.style.display = "none";
	back.style.display = "block";

	if (window.widget) {
		setTimeout('widget.performTransition();', 0);
	}
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
	var front = document.getElementById("front");
	var back = document.getElementById("back");

	if (window.widget) {
		widget.prepareForTransition("ToFront");
		updatePrefs();
	}

	front.style.display="block";
	back.style.display="none";

	if (window.widget) {
		setTimeout('widget.performTransition();', 0);
	}
}

if (window.widget) {
	widget.onremove = remove;
	widget.onhide = hide;
	widget.onshow = show;
	widget.onsync = sync;
}



// ---------------------------- //
// Begin app-specific functions //
// ---------------------------- //



var wid = widget.identifier;
var prefType = loadPref(wid+"type",0);
var prefLocation = loadPref(wid+"loc","/opt/local/bin/");
var prefSharpSize = loadPref(wid+"sharpSize","1");
var prefSharpAmount = loadPref(wid+"sharpAmount","1");
var prefSharpThresh = loadPref(wid+"sharpThresh","0.1");
var prefScale = loadPref(wid+"scale",5);
//var prefOutput = loadPref(wid+"output",0);

// Preference Saving

function loadPref(key,value) {
	var string = widget.preferenceForKey(key);
	if (string != null) {
		return string;
	} else {
		widget.setPreferenceForKey(value,key);
		return value;
	}
}

function loadPrefs() {
//	alert("ready!");
	document.getElementById("type").object.setSelectedIndex(prefType);
	document.getElementById("loc").value = prefLocation;
	document.getElementById("sharpSize").value = prefSharpSize;
	document.getElementById("sharpAmount").value = prefSharpAmount;
	document.getElementById("sharpThresh").value = prefSharpThresh;
	document.getElementById("scale").object.setSelectedIndex(prefScale);
//	document.getElementById("output").object.setSelectedIndex(prefOutput);
	updateFeedback();
}

function updatePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(prefType,wid+"type");
		widget.setPreferenceForKey(prefLocation,wid+"loc");
		widget.setPreferenceForKey(prefSharpSize,wid+"sharpSize");
		widget.setPreferenceForKey(prefSharpAmount,wid+"sharpAmount");
		widget.setPreferenceForKey(prefSharpThresh,wid+"sharpThresh");
		widget.setPreferenceForKey(prefScale,wid+"scale");
//		widget.setPreferenceForKey(prefOutput,wid+"output");
	}
}

function erasePrefs() {
	if (window.widget) {
		widget.setPreferenceForKey(null,wid+"type");
		widget.setPreferenceForKey(null,wid+"loc");
		widget.setPreferenceForKey(null,wid+"sharpSize");
		widget.setPreferenceForKey(null,wid+"sharpAmount");
		widget.setPreferenceForKey(null,wid+"sharpThresh");
		widget.setPreferenceForKey(null,wid+"scale");
		widget.setPreferenceForKey(null,wid+"output");
	}
}

// Basic Functions

function updateType(event) {
	prefType = document.getElementById("type").object.getSelectedIndex();
	updateFeedback();
	updatePrefs();
}

function updateFeedback(event) {
	switch (prefType) {
		case 0:	//	iOS (app store + devices)
			document.getElementById("feedback").innerHTML = "PNG files: 1024, 512, 144, 114, 72...";
			break;
		case 1:	//	Mac (ICNS format)
			document.getElementById("feedback").innerHTML = "ICNS file: 512, 256, 128, 32, 16";
			break;
		case 2:	//	Windows (ICO format)
			document.getElementById("feedback").innerHTML = "ICO file: 256, 48, 32, 24, 16";
			break;
		case 3:	//	Desktop (Mac + Windows)
			document.getElementById("feedback").innerHTML = "ICNS, ICO";
			break;
		default://	All the icons
			document.getElementById("feedback").innerHTML = "PNG, ICNS, ICO";
		}
}

function updateLoc(event) {
	prefLoc = document.getElementById("loc").value;
}

function updateSharpSize(event) {
	prefSharpSize = document.getElementById("sharpSize").value;
}

function updateSharpAmount(event) {
	prefSharpAmount = document.getElementById("sharpAmount").value;
}

function updateSharpThresh(event) {
	prefSharpThresh = document.getElementById("sharpThresh").value;
}

function updateScale(event) {
	prefScale = document.getElementById("scale").object.getSelectedIndex();
	updatePrefs();
}

function updateOutput(event) {
//	prefOutput = document.getElementById("output").object.getSelectedIndex();
	updatePrefs();
}



// Be sure to assign these handlers for the ondragenter and ondragover events on your drop target. These handlers prevent Web Kit from processing drag events so you can handle the drop when it occurs.

function dragEnter(event) {
	event.stopPropagation();
	event.preventDefault();
}

function dragOver(event) {
	event.stopPropagation();
	event.preventDefault();
}



var uri = [];
var uriParts = [];

function dragDrop(event) {
try {
	uri = event.dataTransfer.getData("text/uri-list");
	uri = uri.replace(/file:\/\/localhost/gi, "");
	uri = uri.replace(/\%20/gi, "\\ ");
	uri = uri.split("\n");
//	alert("uri length: "+uri.length+"\nuri: "+uri.join("\n"));
	uri = uri.sort(sortAlphaNum);
//	alert("uri length: "+uri.length+"\nuri: "+uri.join("\n"));
	for (var i=0; i<uri.length; i++) {
//		alert("i: "+i+"\nuriPart: "+uri[i]);
		uriParts[i] = uri[i].match(/(.+?)(\.\w{3,4})$/);
	}
//	alert("uriParts:\n"+uriParts.join("\n"));
//	if (uriParts == null) uriParts = uri[0].match(/(.+?)(\.\w{3,4})$/);
//	if (typeof(uriParts[3])=="undefined") uriParts[3] = uriParts[2];
	var scale = " -filter ";

	switch (prefScale) {
	case 0:
		scale += "Point ";
		break;
	case 1:
		scale += "Box ";
		break;
	case 2:
		scale += "Cubic ";
		break;
	case 3:
		scale += "Quadratic ";
		break;
	case 4:
		scale += "Gaussian ";
		break;
	case 5:
		scale += "Mitchell ";
		break;
	case 6:
		scale += "Catrom ";
		break;
	case 7:
		scale += "Lanczos ";
		break;
	default:
		scale = "";
	}

//alert("scale: "+scale);

var command = "";

for (var i=0; i<uri.length; i++) {
	switch (prefType) {
		case 0:
//			alert("PNG files: 1024, 512, 144, 114, 72...");
/* old icon set */
//			command = prefLocation+"convert "+uri[i]+" -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x512";
//			command += " \\( +clone -write "+uriParts[i][1]+"-512"+uriParts[i][2]+" +delete \\)";
//			command += " -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x256";
//			command += " \\( +clone "+scale+" -resize x144 -write "+uriParts[i][1]+"-144"+uriParts[i][2]+" +delete \\)";
//			command += " \\( +clone "+scale+" -resize x114 -write "+uriParts[i][1]+"-114"+uriParts[i][2]+" +delete \\)";
//			command += " \\( +clone "+scale+" -resize x72 -write "+uriParts[i][1]+"-72"+uriParts[i][2]+" +delete \\)";
//			command += scale+" -resize x57 "+uriParts[i][1]+"-57"+uriParts[i][2];
			command = prefLocation+"convert "+uri[i]+" -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x1024";
			command += " \\( +clone -write "+uriParts[i][1]+"-iTunes@2x"+uriParts[i][2]+" +delete \\)";
			command += " -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x512";
			command += " \\( +clone -write "+uriParts[i][1]+"-iTunes"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x320 -write "+uriParts[i][1]+"-documentLarge"+uriParts[i][2]+" +delete \\)";

			command += " -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x256";
			command += " \\( +clone "+scale+" -resize x144 -write "+uriParts[i][1]+"-iPad@2x"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x128 -write "+uriParts[i][1]+"-document@2x"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x114 -write "+uriParts[i][1]+"-iPhone@2x"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x100 -write "+uriParts[i][1]+"-spotlight-simple@2x"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x96 -bordercolor black -border 2x2 -write "+uriParts[i][1]+"-spotlight@2x"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x72 -write "+uriParts[i][1]+"-iPad"+uriParts[i][2]+" +delete \\)";

			command += " -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x128";
			command += " \\( +clone "+scale+" -resize x64 -write "+uriParts[i][1]+"-document"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x58 -write "+uriParts[i][1]+"-settings@2x"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x57 -write "+uriParts[i][1]+"-iPhone"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x50 -write "+uriParts[i][1]+"-spotlight-simple"+uriParts[i][2]+" +delete \\)";
			command += " \\( +clone "+scale+" -resize x48 -bordercolor black -border 1x1 -write "+uriParts[i][1]+"-spotlight"+uriParts[i][2]+" +delete \\)";
			command += scale+" -resize x29 "+uriParts[i][1]+"-settings"+uriParts[i][2];
			widget.system(command, (i+1!=uri.length)?null:endHandler).outputString;
			break;
		case 1:
//			alert("ICNS file: 512, 256, 128, 32, 16");
			command = prefLocation+"convert "+uri[i]+" -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x512";
			command += " \\( +clone -write "+uriParts[i][1]+"-512.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x256 -write "+uriParts[i][1]+"-256.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x128 -write "+uriParts[i][1]+"-128.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x32 -write "+uriParts[i][1]+"-32.png +delete \\)";
			command += scale+" -resize x16 "+uriParts[i][1]+"-16.png";
			widget.system(command, (i+1!=uri.length)?null:endICNS).outputString;
			break;
		case 2:
//			alert("ICO file: 256, 48, 32, 24, 16");
			command = prefLocation+"convert "+uri[i]+" -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x256";
			command += " \\( +clone -write "+uriParts[i][1]+"-256.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x48 -write "+uriParts[i][1]+"-48.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x32 -write "+uriParts[i][1]+"-32.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x24 -write "+uriParts[i][1]+"-24.png +delete \\)";
			command += scale+" -resize x16 "+uriParts[i][1]+"-16.png";
			widget.system(command, (i+1!=uri.length)?null:endICO).outputString;
			break;
		case 3:
//			alert("ICNS, ICO");
			command = prefLocation+"convert "+uri[i]+" -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x512";
			command += " \\( +clone -write "+uriParts[i][1]+"-512.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x256 -write "+uriParts[i][1]+"-256.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x128 -write "+uriParts[i][1]+"-128.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x48 -write "+uriParts[i][1]+"-48.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x32 -write "+uriParts[i][1]+"-32.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x24 -write "+uriParts[i][1]+"-24.png +delete \\)";
			command += scale+" -resize x16 "+uriParts[i][1]+"-16.png";
			widget.system(command, (i+1!=uri.length)?null:endICO).outputString;
			break;
		default:
//			alert("PNG files, ICNS, ICO");
			command = prefLocation+"convert "+uri[i]+" -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x1024";
			command += " \\( +clone -write "+uriParts[i][1]+"-iTunes@2x"+uriParts[i][2]+" +delete \\)";
			command += " -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x512";
			command += " \\( +clone -write "+uriParts[i][1]+"-512.png +delete \\)";
			command += " \\( +clone -write "+uriParts[i][1]+"-iTunes.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x320 -write "+uriParts[i][1]+"-documentLarge.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x256 -write "+uriParts[i][1]+"-256.png +delete \\)";

			command += " -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x256";
			command += " \\( +clone -write "+uriParts[i][1]+"-256.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x144 -write "+uriParts[i][1]+"-iPad@2x.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x128 -write "+uriParts[i][1]+"-128.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x128 -write "+uriParts[i][1]+"-document@2x.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x114 -write "+uriParts[i][1]+"-iPhone@2x.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x100 -write "+uriParts[i][1]+"-spotlight-simple@2x.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x96 -bordercolor black -border 2x2 -write "+uriParts[i][1]+"-spotlight@2x.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x72 -write "+uriParts[i][1]+"-iPad.png +delete \\)";

			command += " -unsharp 0x"+prefSharpSize+"+"+prefSharpAmount+"+"+prefSharpThresh+scale+" -resize x128";
			command += " \\( +clone "+scale+" -resize x64 -write "+uriParts[i][1]+"-document.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x58 -write "+uriParts[i][1]+"-settings@2x.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x57 -write "+uriParts[i][1]+"-iPhone.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x50 -write "+uriParts[i][1]+"-spotlight-simple.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x48 -write "+uriParts[i][1]+"-48.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x48 -bordercolor black -border 1x1 -write "+uriParts[i][1]+"-spotlight.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x32 -write "+uriParts[i][1]+"-32.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x29 -write "+uriParts[i][1]+"-settings.png +delete \\)";
			command += " \\( +clone "+scale+" -resize x24 -write "+uriParts[i][1]+"-24.png +delete \\)";
			command += scale+" -resize x16 "+uriParts[i][1]+"-16.png";
			widget.system(command, (i+1!=uri.length)?null:endICO).outputString;
		}
	}
	showSuccess(event);
} catch (ex) {
	alert("Problem fetching URI: " + ex);
	showFail(event);
	}
	event.stopPropagation();
	event.preventDefault();
}

function endICNS(event) {
try {
	for (i = 0; i < uri.length; i++){
		widget.system(prefLocation+"png2icns "+uriParts[i][1]+".icns "+uriParts[i][1]+"-512.png "+uriParts[i][1]+"-256.png "+uriParts[i][1]+"-128.png "+uriParts[i][1]+"-32.png "+uriParts[i][1]+"-16.png", (i+1!=uri.length)?null:endCleaner).outputString;
	}
	alert("endICNS")
	showSuccess(event);
} catch (ex) {
	alert("Problem creating ICNS: " + ex);
	showFail(event);
	}
}

function endICO(event) {
try {
	if (prefType >= 3) {
		for (i = 0; i < uri.length; i++){
			widget.system(prefLocation+"convert "+uriParts[i][1]+"-16.png "+uriParts[i][1]+"-24.png "+uriParts[i][1]+"-32.png "+uriParts[i][1]+"-48.png "+uriParts[i][1]+"-256.png "+uriParts[i][1]+".ico", (i+1!=uri.length)?null:endICNS).outputString;
		}
		alert("endICO...")
	} else {
		for (i = 0; i < uri.length; i++){
			widget.system(prefLocation+"convert "+uriParts[i][1]+"-16.png "+uriParts[i][1]+"-24.png "+uriParts[i][1]+"-32.png "+uriParts[i][1]+"-48.png "+uriParts[i][1]+"-256.png "+uriParts[i][1]+".ico", (i+1!=uri.length)?null:endCleaner).outputString;
		}
		alert("endICO")
	}
	showSuccess(event);
} catch (ex) {
	alert("Problem creating ICO: " + ex);
	showFail(event);
	}
}

function endCleaner(event) {
try {
	if (prefType == 1) {			// delete 512, 256, 128, 32, 16
		for (i = 0; i < uri.length; i++){
			widget.system("mv "+uriParts[i][1]+"-512.png "+uriParts[i][1]+"-256.png "+uriParts[i][1]+"-128.png "+uriParts[i][1]+"-32.png "+uriParts[i][1]+"-16.png ~/.Trash/", (i+1!=uri.length)?null:endHandler).outputString;
		}
//		alert("endCleaner 1")
	} else if (prefType == 2) {		// delete 256, 48, 32, 24, 16
		for (i = 0; i < uri.length; i++){
			widget.system("mv "+uriParts[i][1]+"-256.png "+uriParts[i][1]+"-48.png "+uriParts[i][1]+"-32.png "+uriParts[i][1]+"-24.png "+uriParts[i][1]+"-16.png ~/.Trash/", (i+1!=uri.length)?null:endHandler).outputString;
		}
//		alert("endCleaner 2")
	} else if (prefType == 3) {		// delete 512, 256, 128, 48, 32, 24, 16
		for (i = 0; i < uri.length; i++){
			widget.system("mv "+uriParts[i][1]+"-512.png "+uriParts[i][1]+"-256.png "+uriParts[i][1]+"-128.png "+uriParts[i][1]+"-48.png "+uriParts[i][1]+"-32.png "+uriParts[i][1]+"-24.png "+uriParts[i][1]+"-16.png ~/.Trash/", (i+1!=uri.length)?null:endHandler).outputString;
		}
//		alert("endCleaner 3")
	} else if (prefType >= 4) {		// delete 512, 256, 128, 48, 32, 24, 16
		for (i = 0; i < uri.length; i++){
			widget.system("mv "+uriParts[i][1]+"-512.png "+uriParts[i][1]+"-256.png "+uriParts[i][1]+"-128.png "+uriParts[i][1]+"-48.png "+uriParts[i][1]+"-32.png "+uriParts[i][1]+"-24.png "+uriParts[i][1]+"-16.png ~/.Trash/", (i+1!=uri.length)?null:endHandler).outputString;
		}
//		alert("endCleaner 4")
	}
	showSuccess(event);
} catch (ex) {
	alert("Problem cleaning up files: " + ex);
	showFail(event);
	}
}

function endHandler(output) {
//	alert("output = "+output.outputString);
	alert("endHandler");
	showMain();
}



function sortName(a, b) {
	var x = a.toLowerCase();
	var y = b.toLowerCase();
	return (x < y) ? -1 : ((x > y) ? 1 : 0);
}

function sortNumber(a, b) {
	return a - b;
}

function sortAlphaNum(a, b) {
	// the next four lines are designed specifically for OS X file arrays
	// and will need to be modified depending on the situation
	var x = a.split("/");
	var y = b.split("/");
	x = x[x.length-1].replace(/\\\s/g," ").split(/(\d+)/);
	y = y[y.length-1].replace(/\\\s/g," ").split(/(\d+)/);
	for (var i in x) {
		if (x[i] && !y[i] || isFinite(x[i]) && !isFinite(y[i])) {
			return -1;
		} else if (!x[i] && y[i] || !isFinite(y[i]) && isFinite(y[i])) {
			return 1;
		} else if (!isFinite(x[i]) && !isFinite(y[i])) {
			x[i] = x[i].toLowerCase();
			y[i] = y[i].toLowerCase();
			if (x[i] < y[i]) return -1;
			if (x[i] > y[i]) return 1;
		} else {
			x[i] = parseFloat(x[i]);
			y[i] = parseFloat(y[i]);
			if (x[i] < y[i]) return -1;
			if (x[i] > y[i]) return 1;
		}
	}
	return 0;
}





// Key listeners

function selectIt(event) {
	if(event.target){
		event = event.target
	}
//	event.focus();
	event.select();
}

// CurrentView animations

function showMain(event) {
	document.getElementById("stack").object.setCurrentView("main", false, true);
}

function showSuccess(event) {
	document.getElementById("stack").object.setCurrentView("success", true, true);
}

function showFail(event) {
	document.getElementById("stack").object.setCurrentView("fail", true, true);
}

function showWrong(event) {
	document.getElementById("stack").object.setCurrentView("wrong", true, true);
}

function showUpdate(event) {
	document.getElementById("stack").object.setCurrentView("update", true, true);
}

// Get Key Value

function getKeyValue(plist, key) {
	var infoPlist = new XMLHttpRequest();
	infoPlist.open("GET", plist, false);
	infoPlist.send(null);
	infoPlist = infoPlist.responseText.replace(/(<([^>]+)>)/ig,"").replace(/\t/ig,"").split("\n");
	for (var i=0; i<infoPlist.length; i++)
		if (infoPlist[i] == key) return infoPlist[i+1];
	return false;
}

// Auto Update

function versionCheck(event) {
	var request = new XMLHttpRequest();
	var address = "http://iaian7.com/files/dashboard/iconifer/version.php?RandomKey=" + Date.parse(new Date());
	request.onload = function() { versionCheckEnd(request); };
	request.open("GET", address);
//	request.setRequestHeader("Cache-Control", "no-cache");
	request.send(null);
}

function versionCheckEnd(request){
	if (request.status == 200) {
		var versions = request.responseText.split("\n");
		var bundleVersion = getKeyValue("Info.plist", "CFBundleVersion");
		var websiteVersion = versions[0];
//		alert("bundleVersion: "+bundleVersion);
//		alert("websiteVersion: "+websiteVersion);

		if (websiteVersion > bundleVersion) {
			document.getElementById("newVersion").innerHTML = "version "+versions[0]+"<br/>"+versions[1];
			return showUpdate();
		} else {
//			alert("you have an up to date version");
		}
	} else {
//		alert("there's been an error fetching HTTP data");
	}
}

// Download File

function versionDownload() {
	widget.openURL("http://iaian7.com/files/dashboard/iconifer/Iconifer.zip");
	showMain();
}

// Visit the website

function iaian7(event)
{
	widget.openURL("http://iaian7.com/dashboard/iconifer");
}